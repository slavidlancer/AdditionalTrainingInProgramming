function slide=upr1
% This is a slideshow file for use with playshow.m and makeshow.m
% To see it run, type 'playshow upr1', 

% Copyright (c) 1984-98 by The MathWorks, Inc.
if nargout<1,
  playshow upr1
else
  %========== Slide 1 ==========

  slide(1).code={
   'DATA = imread(''upr0.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA, ''myfile.bmp'');',
   '',
   '' };
slide(1).text={
   '',
   '',
   '                                  Лабораторно упражнение №1',
   '',
   '',
   '',
   '                                      ЛИНЕЕН  НЕВРОН'};
%========== Slide 2 ==========

slide(2).code={
   'DATA = imread(''upr0.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA, ''myfile.bmp'');',
   '',
   '' };
  slide(2).text={
   'Теоретична част:',
   '',
   '   Най-опростеният модел на неврон има линейна активационна функция и е даден на фигурата - известен е още като Адаптивен линеен елеменр (ADALINE). Всеки входен сигнал (x) има съответната тегловна функция (w). С b се означава отместването. Активационната функция на неврона Ф(*) е функция на входните сигнали и техните тегловни коефициенти. Активацията на неврона се получава като сума на всички входни елементи умножени със съответните тегловни коефициенти. Има два етапа при поизползване на  невронит мрежи, а именно обучение и тестване. При обучението са  '};

  %========== Slide 3 ==========

  slide(3).code={
   'DATA = imread(''upr17.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA, ''myfile.bmp'');',
   '',
   '' };

  slide(3).text={
   'зададени Р на брой входно-изходни двойки х(p):t(p), р=1,2..Р. Целта на обучението е настройка на теглата, така че реакцията на неврона у(р) при вход х(р) да се доближава максимално до желаната реакция t(р). При тестването се подават входни вектори, с които неврона не е бил обучаван. При обучението грешката получена за стъпка t може да се дефинира по формула(1), където с d(t) се означава желаната за получаване стойност на изхода. С y(t) се означава изхода на неврона, а с e(t) грешката. Целта е да се минимизира целевата функция(2), където e(t) представлява грешката в момент от време t. Тъй като целевата функция е сума от квадратите на грешката, то методът за минимизиране се нарича метод на най-малките '};

  %========== Slide 4 ==========

  slide(4).code={
   'DATA = imread(''upr16.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA, ''myfile.bmp'');',
   '',
   '' };

slide(4).text={
   'квадрати. Ако функцията се диференцира по отношение на вектора на теглата  w(t), се получава(3) и тогава за частните производни на грешката  се получавая(4). след заместване на (4) в (2) за вектора на грешката на (2) по отношение на теглата се получава (5).',
   '   Алгоритъм (метод) на най-малките квадрати:',
   '    1)Инициализация:задаваме синаптичните теглови коефициенти; задаваме параметъра, чрез който се определя скоростта на сходимост (може да бъде постоянна величина);задаваме максималният брой алгоритъма и стойностите на минималните грешки.',
	'    2)Пресмятаме грешката по формула (7)'};

  %========== Slide 5 ==========

  slide(5).code={
   'DATA = imread(''upr18.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA, ''myfile.bmp'');',
   '',
   '' };

slide(5).text={
   '   3)Обновяваме тегловите коефициенти посредством формула(8)',
   '   4)Ако текущата грешката е минимизирана, то процедурата се прекратява, а ако грешката е по-голяма от необходимо процедурата продължаваме докато не се достигне максималния брой интерации.',
   'Едно пълно представяне на данните се нарича "epoch".',
   'С цел минимизиране на (2) по отношение на вектора с теглата, се прави стъпка в посока обратна на градиента и затова вектора с теглата на стъпка +1, се настройва с използване на формула (6), където грешката е(t) се задава със (7).'};

  %========== Slide 6 ==========

slide(6).code={
   'DATA = imread(''upr0.bmp'');',
   'imshow(DATA);',
   'imwrite(DATA,''myfile.bmp'');',
};
slide(6).text={
   'Цел на лабораторното упражнение:',
     '   Да се генерират 20 входно изходни двойки данни за обучение на линеен неврон с 5 входа. Да се използва линейна функция Т=2х1-1x2+5x3-4x4+2x5+2 и се добавя и 10% бял шум. Да се тества за колко "epoch" неврона може да се обучи, ако средноквадратичната грешка е 0,001. Ако условие текущата грешка да е по малка от заданието не бъде изпълнено, да се установи след колко итерации средноквадратичната грешка не може да бъде намалявана. Да се тества неврона с нови 5 входно-изходни двойки,получени със същата функция, но без добавяне на бял шум.'};

  %========== Slide 7 ==========

  slide(7).code={
   'nntwarn off',
   'w=[4 2 1 3 1 2 1];',
   'b=3;',
   'P=[ 23 15 -16 10; 21 22 17 12;-32 33 35 14;-23 17 14  13;-17 23 -14 -13;21 -11 -23 13;13 19 -5 10];',
   'T=w*P+b;',
   '[R,Q]=size(P);',
   '[S,Q]=size(T);',
   '[W0,B0]=rands(S,R);',
   'disp_freq=5;',
   'max_epoch=270000;',
   'err_goal=0.01;',
   'lr=0.9*maxlinlr(P,1);',
   'TP=[disp_freq max_epoch err_goal lr];',
   '[W,B,epoch,errors]=trainwh(W0,B0,P,T,TP);',
   'A = purelin(netsum(W*P,B*ones(1,Q)));',
   '' };
   slide(7).text={
   'Начин на провеждане на лабораторното упражнение:',
       'Задаване на обучаваща извадка'
         '%w=[4 2 1 3 1 2 1]';
         '%b=3';
       'Задаване на входно изходни двойки'  
         '%P=[ 23 15 -16 10;21 22 17 12;-32 33 35 14;-23 17 14  13;-17 23 -14 -13;21 -11 -23 13;13 19 -5 10]';
         '%T=w*P+b';
         '%[R,Q] = size(P)'; 
         '%[S,Q] = size(T)';
     };

   %========== Slide 8 ==========

  slide(8).text={
   	'%[W0,B0]=rands(S,R);',
   'Инициализация на неврона'
   	'%disp_freq=5;',
   	'%max_epoch=270000;',
   	'%err_goal=0.01;',
  		'%lr=0.9*maxlinlr(P,1);',
      '%TP=[disp_freq max_epoch err_goal lr];',
   'Обучение на неврона'
      '%[W,B,epoch,errors]=trainwh(W0,B0,P,T,TP);',
   
};

end